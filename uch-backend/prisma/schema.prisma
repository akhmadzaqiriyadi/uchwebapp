// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Definisikan Enum untuk peran agar lebih aman
enum Role {
  USER
  ADMIN
  AUTHOR
}

// Modifikasi Model User untuk menggunakan Enum Role
model User {
  id       Int       @id @default(autoincrement())
  name     String
  npm      String    @unique
  email    String    @unique
  prodi    String
  password String
  role     Role      @default(USER) // Menggunakan Enum Role
  bookings Booking[]
  checkins Checkin[]
  articles Article[] // User bisa menulis banyak artikel
}

// Model untuk Kategori Artikel
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

// Model untuk Tag Artikel
model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

// Model untuk Artikel
model Article {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique // Untuk URL yang ramah SEO, cth: /artikel/judul-artikel-ini
  content     String   @db.Text
  imageUrl    String?  // URL ke gambar, bisa null
  published   Boolean  @default(true)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  categories  Category[]
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model untuk Pemesanan (Booking)
// Mencatat setiap sesi booking ruangan oleh user
model Booking {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  room        String
  purpose     String     @db.Text
  audience    Int
  bookingDate DateTime   @db.Date
  startTime   DateTime   @db.DateTime
  endTime     DateTime   @db.DateTime
  status      String     @default("Pending") // Status: Pending, Approved, Rejected, Checked-in
  qrCode      QRCode?
  checkin     Checkin?
}

// Model untuk QR Code
// Setiap booking yang disetujui akan memiliki satu QR Code unik
model QRCode {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
  token     String   @unique
  expiresAt DateTime
}

// Model untuk Check-in
// Mencatat ketika pengguna berhasil memindai QR code
model Checkin {
  id          Int      @id @default(autoincrement())
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  checkinTime DateTime @default(now())
}